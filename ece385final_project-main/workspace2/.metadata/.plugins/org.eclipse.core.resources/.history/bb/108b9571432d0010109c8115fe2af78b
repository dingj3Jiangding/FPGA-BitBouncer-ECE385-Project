#include "map.h"          // Should now have the consistent BRAM_t
#include "obs.h"          // Should now use the consistent BRAM_t (or guarded)
#include "game_timer.h"
#include <stdint.h>
#include "player.h"       // For Player_animation struct and player variable

// === Global Variable Definitions ===
// Definition for hdmi_ctrl should be in the main C file (e.g., lw_usb_main.c)
// and declared as extern here if map.c needs to access it directly as a global.
// For functions that take BRAM_t* as a parameter, this global extern might not be needed
// if the pointer is always passed.
extern volatile BRAM_t* hdmi_ctrl;

extern struct Player_animation player;

slot_t lawn_map[SLOT_ROWS][SLOT_COLS];

uint8_t zombie_cnt = 0;
uint8_t state = 0;      // From base map.c
uint32_t record_time;   // From base map.c
uint8_t win_game = 0;
uint8_t loss_game = 0;

uint8_t digit_pix[10][32] = {
    {0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99}, // 0
    {0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99}, // 1
    {0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99}, // 2
    {0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99}, // 3
    {0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99}, // 4
    {0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99}, // 5
    {0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99}, // 6
    {0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99}, // 7
    {0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99}, // 8
    {0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99}  // 9
};
uint8_t digit_mapping[2] = {BG_WHITE, BG_BLACK};

void init_map(void) {
    for (uint8_t r = 0; r < SLOT_ROWS; r++) {
        for (uint8_t c = 0; c < SLOT_COLS; c++) {
            lawn_map[r][c].plant_type = 0;
            lawn_map[r][c].remain_hp = 0;
            lawn_map[r][c].under_attack = 0;
            lawn_map[r][c].last_action_time = 0;
            lawn_map[r][c].has_obs = 0;
        }
    }
}

// Parameter name `hdmi_ctrl_param` used to avoid confusion if `hdmi_ctrl` is a global in this file.
// If `hdmi_ctrl` is a global and intended to be used, this parameter can be removed,
// but passing it explicitly is often cleaner.
void init_obstacles(BRAM_t* hdmi_ctrl_param) {
    // Obstacles will be placed only on the second row (index 1, assuming 0-indexed rows)
    const int target_row = 2;

    // Define the hardcoded column indices where obstacles should appear
    // Ensure these column indices are within the valid range [0, SLOT_COLS - 1]
    // SLOT_COLS is typically 16 based on current definitions (640/40)
    const int obstacle_columns[] = {5, 11, 14}; // Example: Place in columns 2, 5, 8, 11, 14
    const int num_obstacle_positions = sizeof(obstacle_columns) / sizeof(obstacle_columns[0]);

    // Ensure target_row is valid
    if (target_row < 0 || target_row >= SLOT_ROWS) {
        // xil_printf("Error: Target row for obstacles is out of bounds!\n"); // Optional error message
        return;
    }

    // Iterate through the hardcoded column positions
    for (int i = 0; i < num_obstacle_positions; i++) {
        int c = obstacle_columns[i]; // Get the current hardcoded column

        // Ensure the hardcoded column is valid
        if (c < 0 || c >= SLOT_COLS) {
            // xil_printf("Warning: Obstacle column %d is out of bounds!\n", c); // Optional warning
            continue; // Skip this invalid column
        }

        lawn_map[target_row][c].has_obs = 1; // Mark this slot as having an obstacle

        // Calculate pixel position for drawing obstacle within the slot
        // (bottom-middle of slot as per original software/map.c)
        uint16_t px = c * SLOT_WIDTH + (SLOT_WIDTH - OBS_WIDTH) / 2;
        uint16_t py = target_row * SLOT_HEIGHT + (SLOT_HEIGHT - OBS_HEIGHT); // Positioned at the bottom of the slot

        draw_static_obs(px, py, hdmi_ctrl_param);
    }
}

int check_obstacle_collision(int next_x, int next_y, struct Player_animation* current_player_frame) {
    // Ensure DINO_WIDTH and DINO_HEIGHT are defined, typically in player.h
    // If not, provide default values or ensure player.h is included before map.h
    #ifndef DINO_WIDTH
    #define DINO_WIDTH 32 // Default if not defined
    #endif
    #ifndef DINO_HEIGHT
    #define DINO_HEIGHT 32 // Default if not defined
    #endif

    // Remove screen boundary check for continuous looping
    // We'll only check for obstacle collision, not screen edges
    if (next_x < 0 || next_y < 0 || (next_y + DINO_HEIGHT) > ROWS) {
        return 1; // Only check Y boundaries (top and bottom)
    }

    int slot_col = next_x / SLOT_WIDTH;
    int slot_row = next_y / SLOT_HEIGHT;

    if (slot_row < 0 || slot_row >= SLOT_ROWS || slot_col < 0 || slot_col >= SLOT_COLS) {
        return 0;
    }

    if (lawn_map[slot_row][slot_col].has_obs) {
        uint16_t obs_px = slot_col * SLOT_WIDTH + (SLOT_WIDTH - OBS_WIDTH) / 2;
        uint16_t obs_py = slot_row * SLOT_HEIGHT + (SLOT_HEIGHT - OBS_HEIGHT);

        int player_left = next_x;
        int player_right = next_x + DINO_WIDTH;
        int player_top = next_y;
        int player_bottom = next_y + DINO_HEIGHT;

        int obs_left = obs_px;
        int obs_right = obs_px + OBS_WIDTH;
        int obs_top = obs_py;
        int obs_bottom = obs_py + OBS_HEIGHT;

        int x_overlap = (player_left < obs_right && player_right > obs_left);
        int y_overlap = (player_top < obs_bottom && player_bottom > obs_top);

        if (x_overlap && y_overlap) {
            // Check jumping status using the passed pointer
            if (current_player_frame != NULL && !current_player_frame->jumping) {
                return 1;
            }
        }
    }
    return 0;
}

int has_obs_at(int x, int y) {
    if (x < 0 || x >= COLUMNS || y < 0 || y >= ROWS) return 0;
    int slot_col = x / SLOT_WIDTH;
    int slot_row = y / SLOT_HEIGHT;

    if (slot_row < 0 || slot_row >= SLOT_ROWS || slot_col < 0 || slot_col >= SLOT_COLS) {
        return 0;
    }
    return lawn_map[slot_row][slot_col].has_obs;
}

void update_frame(void) {
    // draw_player(&player, hdmi_ctrl); // Assuming player.c has draw_player
                                      // and hdmi_ctrl is the global volatile BRAM_t*
}

uint8_t check_loss(void) {
    return loss_game;
}

uint8_t check_win(void) {
    return win_game;
}

// Set loss game flag
void set_loss_game(uint8_t value) {
    loss_game = value;
}

//void set_slot(uint8_t row, uint8_t col, uint8_t plant_type, int16_t hp) {
//    if (row < SLOT_ROWS && col < SLOT_COLS) {
//        if (!lawn_map[row][col].has_obs) {
//            lawn_map[row][col].plant_type = plant_type;
//            lawn_map[row][col].remain_hp = hp;
//            lawn_map[row][col].under_attack = 0;
//            // lawn_map[row][col].last_action_time = game_get_time_ms(); // Assuming game_timer.h provides this
//            // draw_plant(plant_type, row, col, hdmi_ctrl);
//        }
//    }
//}
//
//void delete_slot(uint8_t row, uint8_t col, BRAM_t* hdmi_ctrl_param) {
//    if (row < SLOT_ROWS && col < SLOT_COLS) {
//        lawn_map[row][col].plant_type = 0;
//        lawn_map[row][col].remain_hp = 0;
//        // clear_plant_visual(row, col, hdmi_ctrl_param);
//        // If the slot also had a static obstacle that needs clearing (unlikely for static ones):
//        // if(lawn_map[row][col].has_obs) {
//        //    uint16_t px = col * SLOT_WIDTH + (SLOT_WIDTH - OBS_WIDTH) / 2;
//        //    uint16_t py = row * SLOT_HEIGHT + (SLOT_HEIGHT - OBS_HEIGHT);
//        //    clear_static_obs(px, py, hdmi_ctrl_param); // From obs.h/obs.c
//        // }
//    }
//}
