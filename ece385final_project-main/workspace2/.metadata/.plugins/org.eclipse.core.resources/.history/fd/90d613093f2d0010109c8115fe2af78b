#include "game_end_font.h"

uint8_t char_table[17][16] = {
	// A
	{
		0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe,
		0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00
	},
	// B
	{
		0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
		0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00
	},
	// C
	{
		0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0,
		0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00

	},
	// E
	{
		0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68,
		0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00
	},
	// H
	{
		0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
		0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00
	},

	// I
	{
		0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18,
		0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00
	},

	// M
	{
		0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3,
		0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00
	},
	// N
	{
		0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
		0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00
	},
	// O
	{
		0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
		0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00
	},
	// R
	{
		0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c,
		0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00
	},
	// S
	{
		0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c,
		0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00
	},
	// T
	{
		0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18,
		0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00
	},
	// U
	{
		0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
		0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00
	},
	// V
	{
		0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3,
		0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00
	},
	// Y
	{
		0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18,
		0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00

	},
	// Z
	{
		0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30,
		0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00
	},
	// surprise (exclamation mark)
	{
		0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
		0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00
	}
};

// Add D character to the char_table (or reuse one of the existing ones)
// Let's use slot 3 for D (replacing E temporarily) or add a new constant
#define CHAR_D 3  // Using slot 3 for D

// Initialize D character in the char_table at position 3
void init_d_character() {
	// D character bitmap
	uint8_t d_char[16] = {
		0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00
	};

	for(int i = 0; i < 16; i++) {
		char_table[CHAR_D][i] = d_char[i];
	}
}

void draw_chrarcter(uint16_t x, uint16_t y, uint8_t char_id, BRAM_t* hdmi_ctrl){
	x = x/2;
	for(int i = 0; i < FONT_HEIGHT; i++){
		for(int j = 0; j < FONT_WIDTH; j++){
			if(char_table[char_id][i] & (0x80 >> j)){
				hdmi_ctrl->VRAM[320*(y + i*4) + (x + j*2)] = FONT_COLOR;
				hdmi_ctrl->VRAM[320*(y + i*4) + (x + j*2+1)] = FONT_COLOR;
				hdmi_ctrl->VRAM[320*(y + i*4+1) + (x + j*2)] = FONT_COLOR;
				hdmi_ctrl->VRAM[320*(y + i*4+1) + (x + j*2+1)] = FONT_COLOR;
				hdmi_ctrl->VRAM[320*(y + i*4+2) + (x + j*2)] = FONT_COLOR;
				hdmi_ctrl->VRAM[320*(y + i*4+2) + (x + j*2+1)] = FONT_COLOR;
				hdmi_ctrl->VRAM[320*(y + i*4+3) + (x + j*2)] = FONT_COLOR;
				hdmi_ctrl->VRAM[320*(y + i*4+3) + (x + j*2+1)] = FONT_COLOR;
			}
		}
	}
}

void draw_game_loss(BRAM_t* hdmi_ctrl){
	// Initialize D character
	init_d_character();

	// Calculate center position for "YOU DIED!"
	// Total width = 8 characters + 7 spaces = 8 * CHAR_WIDTH + 7 * CHAR_WIDTH = 15 * CHAR_WIDTH
	// Actually, let's count: Y-O-U-space-D-I-E-D-! = 9 character positions
	int total_width = 9 * CHAR_WIDTH;
	int start_x = (SCREEN_WIDTH - total_width) / 2;
	int start_y = (SCREEN_HEIGHT - CHAR_HEIGHT) / 2;  // Center vertically

	// Draw "YOU DIED!" centered on screen
	draw_chrarcter(start_x, start_y, CHAR_Y, hdmi_ctrl);                             // Y
	draw_chrarcter(start_x + CHAR_WIDTH, start_y, CHAR_O, hdmi_ctrl);               // O
	draw_chrarcter(start_x + CHAR_WIDTH * 2, start_y, CHAR_U, hdmi_ctrl);           // U
	// Space at position 3
	draw_chrarcter(start_x + CHAR_WIDTH * 4, start_y, CHAR_D, hdmi_ctrl);           // D
	draw_chrarcter(start_x + CHAR_WIDTH * 5, start_y, CHAR_I, hdmi_ctrl);           // I
	draw_chrarcter(start_x + CHAR_WIDTH * 6, start_y, CHAR_E, hdmi_ctrl);           // E (using actual E now)
	draw_chrarcter(start_x + CHAR_WIDTH * 7, start_y, CHAR_D, hdmi_ctrl);           // D
	draw_chrarcter(start_x + CHAR_WIDTH * 8, start_y, CHAR_SUPRISE, hdmi_ctrl);     // !
}
