#include "map.h"          // Should now have the consistent BRAM_t
#include "obs.h"          // Should now use the consistent BRAM_t (or guarded)
#include "game_timer.h"
#include <stdint.h>
#include "player.h"       // For Player_animation struct and player variable

// === Global Variable Definitions ===
// Definition for hdmi_ctrl should be in the main C file (e.g., lw_usb_main.c)
// and declared as extern here if map.c needs to access it directly as a global.
// For functions that take BRAM_t* as a parameter, this global extern might not be needed
// if the pointer is always passed.
extern volatile BRAM_t* hdmi_ctrl;

extern struct Player_animation player;

slot_t lawn_map[SLOT_ROWS][SLOT_COLS];

uint8_t zombie_cnt = 0;
uint8_t state = 0;      // From base map.c
uint32_t record_time;   // From base map.c
uint8_t win_game = 0;
uint8_t loss_game = 0;

uint8_t digit_pix[10][32] = {
    {0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99}, // 0
    {0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99}, // 1
    {0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99}, // 2
    {0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99}, // 3
    {0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99}, // 4
    {0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99}, // 5
    {0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99}, // 6
    {0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x11,0x11,0x99}, // 7
    {0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99}, // 8
    {0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x99,0x99,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x11,0x11,0x99,0x11,0x11,0x99,0x99,0x99,0x99,0x99,0x99,0x99}  // 9
};
uint8_t digit_mapping[2] = {BG_WHITE, BG_BLACK};

void init_map(void) {
    for (uint8_t r = 0; r < SLOT_ROWS; r++) {
        for (uint8_t c = 0; c < SLOT_COLS; c++) {
            lawn_map[r][c].plant_type = 0;
            lawn_map[r][c].remain_hp = 0;
            lawn_map[r][c].under_attack = 0;
            lawn_map[r][c].last_action_time = 0;
            lawn_map[r][c].has_obs = 0;
        }
    }
}

// Parameter name `hdmi_ctrl_param` used to avoid confusion if `hdmi_ctrl` is a global in this file.
// If `hdmi_ctrl` is a global and intended to be used, this parameter can be removed,
// but passing it explicitly is often cleaner.
void init_obstacles(BRAM_t* hdmi_ctrl_param) {
    const int target_row = 1; // MODIFICATION: Target only the second row (index 1)

    // Ensure target_row is valid (optional, but good practice)
    if (target_row < 0 || target_row >= SLOT_ROWS) {
        return; // Or handle error
    }

    // Iterate through all columns OF THE TARGET ROW ONLY
    for (int c = 0; c < SLOT_COLS; c++) {
        // MODIFICATION: Condition for placing an obstacle
        if (c % 3 == 0) { // Example: Place obstacle in columns 0, 3, 6, 9, 12, 15...
            lawn_map[target_row][c].has_obs = 1; // Use target_row

            uint16_t px = c * SLOT_WIDTH + (SLOT_WIDTH - OBS_WIDTH) / 2;
            uint16_t py = target_row * SLOT_HEIGHT + (SLOT_HEIGHT - OBS_HEIGHT); // Use target_row

            draw_static_obs(px, py, hdmi_ctrl_param);
        }
        // No 'else' needed here if init_map() already initializes all lawn_map[r][c].has_obs to 0.
    }
}

int check_obstacle_collision(int next_x, int next_y) {
    if (next_x < 0 || next_x >= COLUMNS || next_y < 0 || next_y >= ROWS) {
        return 1;
    }

    int slot_col = next_x / SLOT_WIDTH;
    int slot_row = next_y / SLOT_HEIGHT;

    if (slot_row < 0 || slot_row >= SLOT_ROWS || slot_col < 0 || slot_col >= SLOT_COLS) {
        return 1;
    }

    // Ensure player and DINO_HEIGHT are accessible
    // (player might be extern struct Player_animation player;)
    // (DINO_HEIGHT should be defined, e.g. in player.h)
    #ifndef DINO_HEIGHT // Basic guard if not defined
    #define DINO_HEIGHT 32 // Example, ensure this matches your player.h
    #endif
    #ifndef DINO_WIDTH
    #define DINO_WIDTH 32 // Example
    #endif


    if (lawn_map[slot_row][slot_col].has_obs) {
        int obs_visual_top_y = slot_row * SLOT_HEIGHT + (SLOT_HEIGHT - OBS_HEIGHT);
        int player_bottom_y = next_y + DINO_HEIGHT;

        if (!player.jumping) {
             if ( ( (next_y >= obs_visual_top_y && next_y < (obs_visual_top_y + OBS_HEIGHT) ) ||
                    (player_bottom_y > obs_visual_top_y && player_bottom_y <= (obs_visual_top_y + OBS_HEIGHT)) ||
                    (next_y < obs_visual_top_y && player_bottom_y > (obs_visual_top_y + OBS_HEIGHT)) ) && // Player spans obstacle
                  (next_x + DINO_WIDTH > slot_col * SLOT_WIDTH && next_x < (slot_col+1) * SLOT_WIDTH)
                ) {
                return 1;
            }
        }
    }
    return 0;
}

int has_obs_at(int x, int y) {
    if (x < 0 || x >= COLUMNS || y < 0 || y >= ROWS) return 0;
    int slot_col = x / SLOT_WIDTH;
    int slot_row = y / SLOT_HEIGHT;

    if (slot_row < 0 || slot_row >= SLOT_ROWS || slot_col < 0 || slot_col >= SLOT_COLS) {
        return 0;
    }
    return lawn_map[slot_row][slot_col].has_obs;
}

void update_frame(void) {
    // draw_player(&player, hdmi_ctrl); // Assuming player.c has draw_player
                                      // and hdmi_ctrl is the global volatile BRAM_t*
}

uint8_t check_loss(void) {
    return loss_game;
}

uint8_t check_win(void) {
    return win_game;
}

//void set_slot(uint8_t row, uint8_t col, uint8_t plant_type, int16_t hp) {
//    if (row < SLOT_ROWS && col < SLOT_COLS) {
//        if (!lawn_map[row][col].has_obs) {
//            lawn_map[row][col].plant_type = plant_type;
//            lawn_map[row][col].remain_hp = hp;
//            lawn_map[row][col].under_attack = 0;
//            // lawn_map[row][col].last_action_time = game_get_time_ms(); // Assuming game_timer.h provides this
//            // draw_plant(plant_type, row, col, hdmi_ctrl);
//        }
//    }
//}
//
//void delete_slot(uint8_t row, uint8_t col, BRAM_t* hdmi_ctrl_param) {
//    if (row < SLOT_ROWS && col < SLOT_COLS) {
//        lawn_map[row][col].plant_type = 0;
//        lawn_map[row][col].remain_hp = 0;
//        // clear_plant_visual(row, col, hdmi_ctrl_param);
//        // If the slot also had a static obstacle that needs clearing (unlikely for static ones):
//        // if(lawn_map[row][col].has_obs) {
//        //    uint16_t px = col * SLOT_WIDTH + (SLOT_WIDTH - OBS_WIDTH) / 2;
//        //    uint16_t py = row * SLOT_HEIGHT + (SLOT_HEIGHT - OBS_HEIGHT);
//        //    clear_static_obs(px, py, hdmi_ctrl_param); // From obs.h/obs.c
//        // }
//    }
//}


